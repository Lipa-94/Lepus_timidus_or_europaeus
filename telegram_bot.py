import telebot
from telebot import types
import config as cfg
from game import Game

bot = telebot.TeleBot(cfg.TELEGRAM_TOKEN)

active_games = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    '''Handle '/start' '''
    markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    help_button = types.InlineKeyboardButton(text="–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å...", 
                                             url='https://pikabu.ru/story/kak_otlichit_zaytsarusaka_ot_zaytsabelyaka_5682135')
    markup.add(start_button, help_button)
    bot.send_message(message.chat.id, 
                     '''–ü—Ä–∏–≤–µ—Ç, {0.first_name}! 
–ï—Å–ª–∏ —Ç—ã –ø–æ–∫–∞ –Ω–µ —É–º–µ–µ—à—å –æ—Ç–ª–∏—á–∞—Ç—å –±–µ–ª—è–∫–æ–≤ –æ—Ç —Ä—É—Å–∞–∫–æ–≤, —Ç–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å...". 
–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"'''.format(message.from_user), 
                     reply_markup=markup)
    


@bot.message_handler(commands=['help'])
def send_help_url(message):
    '''Handle '/help' '''
    markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", callback_data='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    help_button = types.InlineKeyboardButton(text="–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å...", 
                                             url='https://pikabu.ru/story/kak_otlichit_zaytsarusaka_ot_zaytsabelyaka_5682135')
    markup.add(start_button, help_button)
    bot.send_message(message.chat.id, '''–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏ –Ω–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ". 
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å, —á–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –±–µ–ª—è–∫–∏ –æ—Ç —Ä—É—Å–∞–∫–æ–≤, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å..."''', 
                     reply_markup=markup)



@bot.message_handler(content_types=['text', 'audio', 'document', 'animation', 'game', 'photo', 'sticker', 'video', 
                                    'video_note', 'voice', 'location', 'contact', 'venue', 'dice', 'story', 'poll'])
def default_answer(message):
    '''Handle all inputs'''
    markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", callback_data='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
    help_button = types.InlineKeyboardButton(text="–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å...", 
                                             url='https://pikabu.ru/story/kak_otlichit_zaytsarusaka_ot_zaytsabelyaka_5682135')
    markup.add(start_button, help_button)
    bot.send_message(message.chat.id, 
                     text='''–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—ã–µ –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö üòî 
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏ –Ω–∞ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ". 
–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å, —á–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –±–µ–ª—è–∫–∏ –æ—Ç —Ä—É—Å–∞–∫–æ–≤, –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å..."''', 
                     reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data == '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
def start_callback_inline(call):
    '''
    The beginning of the game.
    Game shows 10 random photos and ask question with two answer options.
    To set more than 10 photos you need to write new number as 'active_games[call.from_user.id] = Game(max_iter=new_number)'
    At the end of the game bot shows result and offers to continue the game.
    This method create an empty class Game() for the user and store it into global active_games.
    Method shows 3 buttons to choose game difficulty: ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–¢—è–∂–µ–ª—ã–π']
    '''
    global active_games

    # Block last button
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.data, reply_markup=None)

    # Difficulty buttons
    active_games[call.from_user.id] = Game()
    markup = types.InlineKeyboardMarkup()
    easy_button   = types.InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data='–ù–∏–∑–∫–∏–π')
    middle_button = types.InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data='–°—Ä–µ–¥–Ω–∏–π')
    hard_button   = types.InlineKeyboardButton(text="–¢—è–∂–µ–ª—ã–π", callback_data='–¢—è–∂–µ–ª—ã–π')
    markup.add(easy_button, middle_button, hard_button)
    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏', reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data in ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–¢—è–∂–µ–ª—ã–π'])
def difficulty_callback_inline(call):
    '''
    The beginning of the game.
    Download photo's URLs, labels and ML model's predictions for choosen difficulty.
    Display first question of the game with two options: ['–ë–µ–ª—è–∫', '–†—É—Å–∞–∫']
    '''
    global active_games

    # Block last button
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.data, reply_markup=None)
    
    # Try-exception block for the case of problems with the Internet
    try:
        # Upload dataset of photos, labels, model predictions for choosen difficulty
        active_games[call.from_user.id].set_difficulty(call.data)
    
        # Show current photo and buttons to choose correct answer
        img = open(active_games[call.from_user.id].get_curr_photo_url(), 'rb')
        bot.send_photo(call.message.chat.id, img)
        markup = types.InlineKeyboardMarkup()
        timidus_button = types.InlineKeyboardButton(text="–ë–µ–ª—è–∫", callback_data='–ë–µ–ª—è–∫')
        europaeus_button = types.InlineKeyboardButton(text="–†—É—Å–∞–∫", callback_data='–†—É—Å–∞–∫')
        markup.add(timidus_button, europaeus_button)
        bot.send_message(call.message.chat.id, '–ù–∞ —Ñ–æ—Ç–æ –±–µ–ª—è–∫ –∏–ª–∏ —Ä—É—Å–∞–∫?', reply_markup=markup)
    except:
        markup = types.InlineKeyboardMarkup()
        start_button = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", callback_data='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
        markup.add(start_button)
        bot.send_message(call.message.chat.id, text='–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ['–ë–µ–ª—è–∫', '–†—É—Å–∞–∫'])
def answer_callback_inline(call):
    '''
    The continuation and the end of the game.
    While current iter is less than max_iters, method display question with two options: ['–ë–µ–ª—è–∫', '–†—É—Å–∞–∫']
    If current iter == max_iters, show game result and offers to continue the game
    '''
    global active_games

    # Block last button
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.data, reply_markup=None)
    
    # Try-exception block for the case of problems with the Internet
    try:
        # Continuation of the game
        if active_games[call.from_user.id].get_iter() < active_games[call.from_user.id].max_iters-1:
            # Check last answer and show correct value
            bot.send_message(call.message.chat.id, active_games[call.from_user.id].check_answer(call.data))
            # Show current photo and buttons to choose correct answer
            img = open(active_games[call.from_user.id].get_curr_photo_url(), 'rb')
            bot.send_photo(call.message.chat.id, img)
            markup = types.InlineKeyboardMarkup()
            timidus_button = types.InlineKeyboardButton(text="–ë–µ–ª—è–∫", callback_data='–ë–µ–ª—è–∫')
            europaeus_button = types.InlineKeyboardButton(text="–†—É—Å–∞–∫", callback_data='–†—É—Å–∞–∫')
            markup.add(timidus_button, europaeus_button)
            bot.send_message(call.message.chat.id, '–ù–∞ —Ñ–æ—Ç–æ –±–µ–ª—è–∫ –∏–ª–∏ —Ä—É—Å–∞–∫?', reply_markup=markup)
        # End of the game
        else:
            # Check last answer and show correct value
            bot.send_message(call.message.chat.id, active_games[call.from_user.id].check_answer(call.data))
            # Buttons for new game
            markup = types.InlineKeyboardMarkup()
            start_button = types.InlineKeyboardButton(text="–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
            help_button = types.InlineKeyboardButton(text="–ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–∞—Ç—å...", 
                                                     url='https://pikabu.ru/story/kak_otlichit_zaytsarusaka_ot_zaytsabelyaka_5682135')
            markup.add(start_button, help_button)
            bot.send_message(call.message.chat.id, text=active_games[call.from_user.id].get_result(), reply_markup=markup)
    except:
        markup = types.InlineKeyboardMarkup()
        start_button = types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ", callback_data='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É')
        markup.add(start_button)
        bot.send_message(call.message.chat.id, text='–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π üòî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ', reply_markup=markup)


bot.polling(none_stop=True)